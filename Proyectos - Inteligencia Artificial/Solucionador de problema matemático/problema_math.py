# -*- coding: utf-8 -*-
"""Problema_math.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bd6UHcezTsOMXzjCaYJZ1wCvQ_FvmDEo

**KATERINE LISBETH RAFAEL BOURDIERD 2022-0088**

A manufacturer makes two models of an item, standard and deluxe. It costs $40  to  manufacture the standard model and $60 for the deluxe. A market research firm estimates that if the standard model is priced at x dollars and the deluxe at y dollars, then the manufacturer will sell 500(y−x)of the standard items and 45,000+500(x−2y) of the deluxe each year. How should the items be priced to maximize profit?
"""

#Parámetros
tam_poblacion = 10
num_iteraciones = 100
num_padres = 4
tasa_mutacion = 0.6

def calcular_beneficio(x, y):
    ingreso_estandar = x * 500 * (y - x)
    ingreso_deluxe = y * (45000 + 500 * (x - 2 * y))
    costo_estandar = 40 * 500 * (y - x)
    costo_deluxe = 60 * (45000 + 500 * (x - 2 * y))

    # Calculamos el beneficio restando costos de ingresos
    beneficio = (ingreso_estandar + ingreso_deluxe) - (costo_estandar + costo_deluxe)
    return beneficio

import random

def inicializar_poblacion(tam_poblacion):
    poblacion = []
    for _ in range(tam_poblacion):
        # precios aleatorios para x , y
        x = int(random.uniform(0, 100))
        y = int(random.uniform(0, 100))
        poblacion.append((x, y))
    return poblacion

poblacion = inicializar_poblacion(tam_poblacion)
poblacion

def seleccionar_padres(pob, num_padres):
    padres = sorted(pob, key=lambda ind: calcular_beneficio(ind[0], ind[1]), reverse=True)[:num_padres]
    return padres

padre = seleccionar_padres(poblacion, num_padres)
padre

# Función para realizar el cruce de dos padres
def cruce(padre1, padre2):
    hijo = tuple(int((padre1[i] + padre2[i]) / 2) for i in range(len(padre1)))
    return hijo

padre1 = (81.5, 90.7)
padre2 = (20.4, 67.6)
hijo = cruce(padre1, padre2)

print("Padre 1:", padre1)
print("Padre 2:", padre2)
print("Hijo:", hijo)

def mutar(individuo, tasa_mutacion):
    for i in range(len(individuo)):
        if random.random() < tasa_mutacion:
            mutacion = int(random.uniform(-20,20))  # Elegir aleatoriamente entre sumar o restar 20
            individuo = individuo[:i] + (individuo[i] + mutacion,) + individuo[i + 1:]
    return individuo

individuo_inicial = (50.4, 60.4, 70.7, 80.6, 90.7)

individuo_mutado = mutar(individuo_inicial, tasa_mutacion)
print(individuo_mutado)

hijo = (81.5, 67.7)
muta = mutar(hijo, tasa_mutacion)
muta

# Algoritmo genético
for iteracion in range(num_iteraciones):
    print(f"Iteración {iteracion + 1}")

    padre = seleccionar_padres(poblacion, num_padres)
    print("Padres seleccionados:", padre)

    descendencia = []

    for i in range(0, num_padres, 2):
        padre1 = padre[i]
        padre2 = padre[i + 1]

        hijo = cruce(padre1, padre2)
        hijo = mutar(hijo, tasa_mutacion)

        descendencia.append(hijo)

    print("Descendencia generada:", descendencia)

    poblacion = padre + descendencia
    print("Nueva población:", poblacion)

    print("------------------------------")

mejor_individuo = max(poblacion, key=lambda ind: calcular_beneficio(ind[0], ind[1]))
mejor_x, mejor_y = mejor_individuo
mejor_beneficio = calcular_beneficio(mejor_x, mejor_y)

print("Mejor solución encontrada:")
print("Precio modelo estándar:", mejor_x)
print("Precio modelo deluxe:", mejor_y)
print("Beneficio máximo:", mejor_beneficio)